print (type(3.14))

print(1000)

print (10/3)

print (10 ** 3)

print (5+3*2)

print (5 * (3+2))

# 파이썬은 문자와 문자열을 구분하지 않는다.
# 글자 수에 상관 없이 모두 문자열로 처리한다
print (type ("1000")) # str
print (type ('1000')) # str
print (type (1000))   # int

print (
  '파이썬은 "재밌다."'
  "I'm a man"
)

# 문자열 연산 
# 문자열 + 문자열 : 문자열을 이어붙인다.
print ("문자열 연산 ")
print ("문자열 더하기")
print( "안녕 " + "하세요")
# 문자열 * 숫자 : 숫자만큼 문자열을 반복한다.
print(
  "문자열 " * 3
)
# 문자열 / 숫자 : 지원하지 않는다.
# print( "문자열" / 3)


# 파이썬과 변수 

# 변수 : 어떤 값에 대한 이름

# ex) 주식 총평가 금액 구하기
네이버 = 70000
네이버수량 = 3
셀트리온 = 50000
셀트리온수량 = 4
삼성증권 = 33000
삼성증권수량 = 5

# 평가금액 출력하기
평가금액 = (네이버 * 네이버수량) + (셀트리온 * 셀트리온수량) + (삼성증권 * 삼성증권수량)

print (평가금액) # 575000

# f-string을 활용하여 출력하기
print (f"네이버 총 평가 금액 : {네이버 * 3 }")

# format()을 활용하여 출력하기
print ("네이버 총 평가 금액 : {}".format(네이버 * 3))

# 파이썬 인터프리터는 등호를 만나면 우변부터 해석한다.
# 변수를 정의할 때 좌변에는 변수의 이름, 우변에는 값을 넣는다.
# 우변의 값이 메모리에 할당되고 메모리상의 위치를 변수가 가리킨다.
# 등호로 바인딩한다.(주소의 값을 지정해 준다.)

# 변수 이름 규칙
# 변수의 이름은 대문자와 소문자를 구분한다.
apple = 10
Apple = 20
print(apple, Apple) # 서로 다른 값이 나온다.
# 변수의 이름은 영문(한글), 숫자, 언더스코어(_)만 사용한다.
# 변수의 이름은 숫자로 시작 불가능하다.

# 변수와 메모리
# 변수는 자주 사용하는 값에 대한 이름표라고 생각하자.
# 이름을 통해 값에 접근하는 것이다.(바인딩 했잖아).

# 바인딩 : 해당 값이 메모리에 위치하는 주소를 기억하는 것.
# 바인딩된 값의 실제 주소를 확인하려면 id()함수를 사용한다.
아이스크림 = 500
print( id(아이스크림)) # 2113255196016

# 연습문제
# 과자가 1500, 아이스크림이 1000원 / 과자 5개 아이스크림 7개의 값을 출력하기
과자 = 1500
# 변수 재할당이 되는구나!
아이스크림 = 1000
print(과자 * 5 + (아이스크림 * 7))

# 원/달러 환율이 1290원일 떄, $900의 원화 계산하기
원 = 1200
print( 원 * 900) # 1080000

# 월요일에 소고기가 100g당 1만원. 매일 전일 가격에서 10% 씩 상승했을 경우 수요일에는 얼마가 될까?
월 = 1
화 = 2
수 = 3
일일상승 = 1.1
print(
  int(10000 *( 일일상승 ) ** (수 - 월))
)